"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _InfisicalClient_client;
Object.defineProperty(exports, "__esModule", { value: true });
exports.InfisicalClient = void 0;
const rust = __importStar(require("../../binding"));
const schemas_1 = require("./schemas");
class InfisicalClient {
    constructor(settings) {
        var _a;
        _InfisicalClient_client.set(this, void 0);
        settings.userAgent = "infisical-nodejs-sdk";
        const settingsJson = settings == null ? null : schemas_1.Convert.clientSettingsToJson(settings);
        __classPrivateFieldSet(this, _InfisicalClient_client, new rust.InfisicalClient(settingsJson, (_a = settings.logLevel) !== null && _a !== void 0 ? _a : 4), "f");
    }
    getSecret(options) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const command = yield __classPrivateFieldGet(this, _InfisicalClient_client, "f").runCommand(schemas_1.Convert.commandToJson({
                getSecret: options
            }));
            const response = schemas_1.Convert.toResponseForGetSecretResponse(command);
            if (!response.success || response.data == null) {
                throw new Error((_a = response.errorMessage) !== null && _a !== void 0 ? _a : "Something went wrong");
            }
            return response.data.secret;
        });
    }
    listSecrets(options) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const command = yield __classPrivateFieldGet(this, _InfisicalClient_client, "f").runCommand(schemas_1.Convert.commandToJson({
                listSecrets: options
            }));
            const response = schemas_1.Convert.toResponseForListSecretsResponse(command);
            if (!response.success || response.data == null) {
                throw new Error((_a = response.errorMessage) !== null && _a !== void 0 ? _a : "Something went wrong");
            }
            return response.data.secrets;
        });
    }
    updateSecret(options) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const command = yield __classPrivateFieldGet(this, _InfisicalClient_client, "f").runCommand(schemas_1.Convert.commandToJson({
                updateSecret: options
            }));
            const response = schemas_1.Convert.toResponseForUpdateSecretResponse(command);
            if (!response.success || response.data == null) {
                throw new Error((_a = response.errorMessage) !== null && _a !== void 0 ? _a : "Something went wrong");
            }
            return response.data.secret;
        });
    }
    deleteSecret(options) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const command = yield __classPrivateFieldGet(this, _InfisicalClient_client, "f").runCommand(schemas_1.Convert.commandToJson({
                deleteSecret: options
            }));
            const response = schemas_1.Convert.toResponseForDeleteSecretResponse(command);
            if (!response.success || response.data == null) {
                throw new Error((_a = response.errorMessage) !== null && _a !== void 0 ? _a : "Something went wrong");
            }
            return response.data.secret;
        });
    }
    createSecret(options) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const command = yield __classPrivateFieldGet(this, _InfisicalClient_client, "f").runCommand(schemas_1.Convert.commandToJson({
                createSecret: options
            }));
            const response = schemas_1.Convert.toResponseForCreateSecretResponse(command);
            if (!response.success || response.data == null) {
                throw new Error((_a = response.errorMessage) !== null && _a !== void 0 ? _a : "Something went wrong");
            }
            return response.data.secret;
        });
    }
    createSymmetricKey() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const command = yield __classPrivateFieldGet(this, _InfisicalClient_client, "f").runCommand(schemas_1.Convert.commandToJson({
                createSymmetricKey: {
                    data: ""
                }
            }));
            const response = schemas_1.Convert.toResponseForCreateSymmetricKeyResponse(command);
            if (!response.success || response.data == null) {
                throw new Error((_a = response.errorMessage) !== null && _a !== void 0 ? _a : "Something went wrong");
            }
            return response.data.key;
        });
    }
    encryptSymmetric(options) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const command = yield __classPrivateFieldGet(this, _InfisicalClient_client, "f").runCommand(schemas_1.Convert.commandToJson({
                encryptSymmetric: options
            }));
            const response = schemas_1.Convert.toResponseForEncryptSymmetricResponse(command);
            if (!response.success || response.data == null) {
                throw new Error((_a = response.errorMessage) !== null && _a !== void 0 ? _a : "Something went wrong");
            }
            return response.data;
        });
    }
    decryptSymmetric(options) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const command = yield __classPrivateFieldGet(this, _InfisicalClient_client, "f").runCommand(schemas_1.Convert.commandToJson({
                decryptSymmetric: options
            }));
            const response = schemas_1.Convert.toResponseForDecryptSymmetricResponse(command);
            if (!response.success || response.data == null) {
                throw new Error((_a = response.errorMessage) !== null && _a !== void 0 ? _a : "Something went wrong");
            }
            return response.data.decrypted;
        });
    }
}
exports.InfisicalClient = InfisicalClient;
_InfisicalClient_client = new WeakMap();
