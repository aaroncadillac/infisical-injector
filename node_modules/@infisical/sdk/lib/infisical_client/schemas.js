"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Convert = void 0;
class Convert {
    static toClientSettings(json) {
        return cast(JSON.parse(json), r("ClientSettings"));
    }
    static clientSettingsToJson(value) {
        return JSON.stringify(uncast(value, r("ClientSettings")), null, 2);
    }
    static toCommand(json) {
        return cast(JSON.parse(json), r("Command"));
    }
    static commandToJson(value) {
        return JSON.stringify(uncast(value, r("Command")), null, 2);
    }
    static toResponseForAccessTokenSuccessResponse(json) {
        return cast(JSON.parse(json), r("ResponseForAccessTokenSuccessResponse"));
    }
    static responseForAccessTokenSuccessResponseToJson(value) {
        return JSON.stringify(uncast(value, r("ResponseForAccessTokenSuccessResponse")), null, 2);
    }
    static toResponseForCreateSecretResponse(json) {
        return cast(JSON.parse(json), r("ResponseForCreateSecretResponse"));
    }
    static responseForCreateSecretResponseToJson(value) {
        return JSON.stringify(uncast(value, r("ResponseForCreateSecretResponse")), null, 2);
    }
    static toResponseForCreateSymmetricKeyResponse(json) {
        return cast(JSON.parse(json), r("ResponseForCreateSymmetricKeyResponse"));
    }
    static responseForCreateSymmetricKeyResponseToJson(value) {
        return JSON.stringify(uncast(value, r("ResponseForCreateSymmetricKeyResponse")), null, 2);
    }
    static toResponseForDecryptSymmetricResponse(json) {
        return cast(JSON.parse(json), r("ResponseForDecryptSymmetricResponse"));
    }
    static responseForDecryptSymmetricResponseToJson(value) {
        return JSON.stringify(uncast(value, r("ResponseForDecryptSymmetricResponse")), null, 2);
    }
    static toResponseForDeleteSecretResponse(json) {
        return cast(JSON.parse(json), r("ResponseForDeleteSecretResponse"));
    }
    static responseForDeleteSecretResponseToJson(value) {
        return JSON.stringify(uncast(value, r("ResponseForDeleteSecretResponse")), null, 2);
    }
    static toResponseForEncryptSymmetricResponse(json) {
        return cast(JSON.parse(json), r("ResponseForEncryptSymmetricResponse"));
    }
    static responseForEncryptSymmetricResponseToJson(value) {
        return JSON.stringify(uncast(value, r("ResponseForEncryptSymmetricResponse")), null, 2);
    }
    static toResponseForGetSecretResponse(json) {
        return cast(JSON.parse(json), r("ResponseForGetSecretResponse"));
    }
    static responseForGetSecretResponseToJson(value) {
        return JSON.stringify(uncast(value, r("ResponseForGetSecretResponse")), null, 2);
    }
    static toResponseForListSecretsResponse(json) {
        return cast(JSON.parse(json), r("ResponseForListSecretsResponse"));
    }
    static responseForListSecretsResponseToJson(value) {
        return JSON.stringify(uncast(value, r("ResponseForListSecretsResponse")), null, 2);
    }
    static toResponseForUpdateSecretResponse(json) {
        return cast(JSON.parse(json), r("ResponseForUpdateSecretResponse"));
    }
    static responseForUpdateSecretResponseToJson(value) {
        return JSON.stringify(uncast(value, r("ResponseForUpdateSecretResponse")), null, 2);
    }
}
exports.Convert = Convert;
function invalidValue(typ, val, key, parent = '') {
    const prettyTyp = prettyTypeName(typ);
    const parentText = parent ? ` on ${parent}` : '';
    const keyText = key ? ` for key "${key}"` : '';
    throw Error(`Invalid value${keyText}${parentText}. Expected ${prettyTyp} but got ${JSON.stringify(val)}`);
}
function prettyTypeName(typ) {
    if (Array.isArray(typ)) {
        if (typ.length === 2 && typ[0] === undefined) {
            return `an optional ${prettyTypeName(typ[1])}`;
        }
        else {
            return `one of [${typ.map(a => { return prettyTypeName(a); }).join(", ")}]`;
        }
    }
    else if (typeof typ === "object" && typ.literal !== undefined) {
        return typ.literal;
    }
    else {
        return typeof typ;
    }
}
function jsonToJSProps(typ) {
    if (typ.jsonToJS === undefined) {
        const map = {};
        typ.props.forEach((p) => map[p.json] = { key: p.js, typ: p.typ });
        typ.jsonToJS = map;
    }
    return typ.jsonToJS;
}
function jsToJSONProps(typ) {
    if (typ.jsToJSON === undefined) {
        const map = {};
        typ.props.forEach((p) => map[p.js] = { key: p.json, typ: p.typ });
        typ.jsToJSON = map;
    }
    return typ.jsToJSON;
}
function transform(val, typ, getProps, key = '', parent = '') {
    function transformPrimitive(typ, val) {
        if (typeof typ === typeof val)
            return val;
        return invalidValue(typ, val, key, parent);
    }
    function transformUnion(typs, val) {
        const l = typs.length;
        for (let i = 0; i < l; i++) {
            const typ = typs[i];
            try {
                return transform(val, typ, getProps);
            }
            catch (_) { }
        }
        return invalidValue(typs, val, key, parent);
    }
    function transformEnum(cases, val) {
        if (cases.indexOf(val) !== -1)
            return val;
        return invalidValue(cases.map(a => { return l(a); }), val, key, parent);
    }
    function transformArray(typ, val) {
        if (!Array.isArray(val))
            return invalidValue(l("array"), val, key, parent);
        return val.map(el => transform(el, typ, getProps));
    }
    function transformDate(val) {
        if (val === null) {
            return null;
        }
        const d = new Date(val);
        if (isNaN(d.valueOf())) {
            return invalidValue(l("Date"), val, key, parent);
        }
        return d;
    }
    function transformObject(props, additional, val) {
        if (val === null || typeof val !== "object" || Array.isArray(val)) {
            return invalidValue(l(ref || "object"), val, key, parent);
        }
        const result = {};
        Object.getOwnPropertyNames(props).forEach(key => {
            const prop = props[key];
            const v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;
            result[prop.key] = transform(v, prop.typ, getProps, key, ref);
        });
        Object.getOwnPropertyNames(val).forEach(key => {
            if (!Object.prototype.hasOwnProperty.call(props, key)) {
                result[key] = transform(val[key], additional, getProps, key, ref);
            }
        });
        return result;
    }
    if (typ === "any")
        return val;
    if (typ === null) {
        if (val === null)
            return val;
        return invalidValue(typ, val, key, parent);
    }
    if (typ === false)
        return invalidValue(typ, val, key, parent);
    let ref = undefined;
    while (typeof typ === "object" && typ.ref !== undefined) {
        ref = typ.ref;
        typ = typeMap[typ.ref];
    }
    if (Array.isArray(typ))
        return transformEnum(typ, val);
    if (typeof typ === "object") {
        return typ.hasOwnProperty("unionMembers") ? transformUnion(typ.unionMembers, val)
            : typ.hasOwnProperty("arrayItems") ? transformArray(typ.arrayItems, val)
                : typ.hasOwnProperty("props") ? transformObject(getProps(typ), typ.additional, val)
                    : invalidValue(typ, val, key, parent);
    }
    if (typ === Date && typeof val !== "number")
        return transformDate(val);
    return transformPrimitive(typ, val);
}
function cast(val, typ) {
    return transform(val, typ, jsonToJSProps);
}
function uncast(val, typ) {
    return transform(val, typ, jsToJSONProps);
}
function l(typ) {
    return { literal: typ };
}
function a(typ) {
    return { arrayItems: typ };
}
function u(...typs) {
    return { unionMembers: typs };
}
function o(props, additional) {
    return { props, additional };
}
function m(additional) {
    return { props: [], additional };
}
function r(name) {
    return { ref: name };
}
const typeMap = {
    "ClientSettings": o([
        { json: "accessToken", js: "accessToken", typ: u(undefined, u(null, "")) },
        { json: "cacheTtl", js: "cacheTtl", typ: u(undefined, u(0, null)) },
        { json: "clientId", js: "clientId", typ: u(undefined, u(null, "")) },
        { json: "clientSecret", js: "clientSecret", typ: u(undefined, u(null, "")) },
        { json: "siteUrl", js: "siteUrl", typ: u(undefined, u(null, "")) },
        { json: "userAgent", js: "userAgent", typ: u(undefined, u(null, "")) },
    ], "any"),
    "Command": o([
        { json: "getSecret", js: "getSecret", typ: u(undefined, r("GetSecretOptions")) },
        { json: "listSecrets", js: "listSecrets", typ: u(undefined, r("ListSecretsOptions")) },
        { json: "createSecret", js: "createSecret", typ: u(undefined, r("CreateSecretOptions")) },
        { json: "updateSecret", js: "updateSecret", typ: u(undefined, r("UpdateSecretOptions")) },
        { json: "deleteSecret", js: "deleteSecret", typ: u(undefined, r("DeleteSecretOptions")) },
        { json: "createSymmetricKey", js: "createSymmetricKey", typ: u(undefined, r("ArbitraryOptions")) },
        { json: "encryptSymmetric", js: "encryptSymmetric", typ: u(undefined, r("EncryptSymmetricOptions")) },
        { json: "decryptSymmetric", js: "decryptSymmetric", typ: u(undefined, r("DecryptSymmetricOptions")) },
    ], false),
    "CreateSecretOptions": o([
        { json: "environment", js: "environment", typ: "" },
        { json: "path", js: "path", typ: u(undefined, u(null, "")) },
        { json: "projectId", js: "projectId", typ: "" },
        { json: "secretComment", js: "secretComment", typ: u(undefined, u(null, "")) },
        { json: "secretName", js: "secretName", typ: "" },
        { json: "secretValue", js: "secretValue", typ: "" },
        { json: "skipMultilineEncoding", js: "skipMultilineEncoding", typ: u(undefined, u(true, null)) },
        { json: "type", js: "type", typ: u(undefined, u(null, "")) },
    ], "any"),
    "ArbitraryOptions": o([
        { json: "data", js: "data", typ: "" },
    ], false),
    "DecryptSymmetricOptions": o([
        { json: "ciphertext", js: "ciphertext", typ: "" },
        { json: "iv", js: "iv", typ: "" },
        { json: "key", js: "key", typ: "" },
        { json: "tag", js: "tag", typ: "" },
    ], "any"),
    "DeleteSecretOptions": o([
        { json: "environment", js: "environment", typ: "" },
        { json: "path", js: "path", typ: u(undefined, u(null, "")) },
        { json: "projectId", js: "projectId", typ: "" },
        { json: "secretName", js: "secretName", typ: "" },
        { json: "type", js: "type", typ: u(undefined, u(null, "")) },
    ], "any"),
    "EncryptSymmetricOptions": o([
        { json: "key", js: "key", typ: "" },
        { json: "plaintext", js: "plaintext", typ: "" },
    ], "any"),
    "GetSecretOptions": o([
        { json: "environment", js: "environment", typ: "" },
        { json: "includeImports", js: "includeImports", typ: u(undefined, u(true, null)) },
        { json: "path", js: "path", typ: u(undefined, u(null, "")) },
        { json: "projectId", js: "projectId", typ: "" },
        { json: "secretName", js: "secretName", typ: "" },
        { json: "type", js: "type", typ: u(undefined, u(null, "")) },
    ], "any"),
    "ListSecretsOptions": o([
        { json: "attachToProcessEnv", js: "attachToProcessEnv", typ: u(undefined, u(true, null)) },
        { json: "environment", js: "environment", typ: "" },
        { json: "includeImports", js: "includeImports", typ: u(undefined, u(true, null)) },
        { json: "path", js: "path", typ: u(undefined, u(null, "")) },
        { json: "projectId", js: "projectId", typ: "" },
    ], "any"),
    "UpdateSecretOptions": o([
        { json: "environment", js: "environment", typ: "" },
        { json: "path", js: "path", typ: u(undefined, u(null, "")) },
        { json: "projectId", js: "projectId", typ: "" },
        { json: "secretName", js: "secretName", typ: "" },
        { json: "secretValue", js: "secretValue", typ: "" },
        { json: "skipMultilineEncoding", js: "skipMultilineEncoding", typ: u(undefined, u(true, null)) },
        { json: "type", js: "type", typ: u(undefined, u(null, "")) },
    ], "any"),
    "ResponseForAccessTokenSuccessResponse": o([
        { json: "data", js: "data", typ: u(undefined, u(null, r("AccessTokenSuccessResponse"))) },
        { json: "errorMessage", js: "errorMessage", typ: u(undefined, u(null, "")) },
        { json: "success", js: "success", typ: true },
    ], "any"),
    "AccessTokenSuccessResponse": o([
        { json: "accessToken", js: "accessToken", typ: "" },
    ], "any"),
    "ResponseForCreateSecretResponse": o([
        { json: "data", js: "data", typ: u(undefined, u(null, r("CreateSecretResponse"))) },
        { json: "errorMessage", js: "errorMessage", typ: u(undefined, u(null, "")) },
        { json: "success", js: "success", typ: true },
    ], "any"),
    "CreateSecretResponse": o([
        { json: "secret", js: "secret", typ: r("CreateSecretResponseSecret") },
    ], "any"),
    "CreateSecretResponseSecret": o([
        { json: "environment", js: "environment", typ: "" },
        { json: "isFallback", js: "isFallback", typ: u(undefined, true) },
        { json: "secretComment", js: "secretComment", typ: "" },
        { json: "secretKey", js: "secretKey", typ: "" },
        { json: "secretValue", js: "secretValue", typ: "" },
        { json: "type", js: "type", typ: "" },
        { json: "version", js: "version", typ: 0 },
        { json: "workspace", js: "workspace", typ: "" },
    ], "any"),
    "ResponseForCreateSymmetricKeyResponse": o([
        { json: "data", js: "data", typ: u(undefined, u(null, r("CreateSymmetricKeyResponse"))) },
        { json: "errorMessage", js: "errorMessage", typ: u(undefined, u(null, "")) },
        { json: "success", js: "success", typ: true },
    ], "any"),
    "CreateSymmetricKeyResponse": o([
        { json: "key", js: "key", typ: "" },
    ], "any"),
    "ResponseForDecryptSymmetricResponse": o([
        { json: "data", js: "data", typ: u(undefined, u(null, r("DecryptSymmetricResponse"))) },
        { json: "errorMessage", js: "errorMessage", typ: u(undefined, u(null, "")) },
        { json: "success", js: "success", typ: true },
    ], "any"),
    "DecryptSymmetricResponse": o([
        { json: "decrypted", js: "decrypted", typ: "" },
    ], "any"),
    "ResponseForDeleteSecretResponse": o([
        { json: "data", js: "data", typ: u(undefined, u(null, r("DeleteSecretResponse"))) },
        { json: "errorMessage", js: "errorMessage", typ: u(undefined, u(null, "")) },
        { json: "success", js: "success", typ: true },
    ], "any"),
    "DeleteSecretResponse": o([
        { json: "secret", js: "secret", typ: r("DeleteSecretResponseSecret") },
    ], "any"),
    "DeleteSecretResponseSecret": o([
        { json: "environment", js: "environment", typ: "" },
        { json: "isFallback", js: "isFallback", typ: u(undefined, true) },
        { json: "secretComment", js: "secretComment", typ: "" },
        { json: "secretKey", js: "secretKey", typ: "" },
        { json: "secretValue", js: "secretValue", typ: "" },
        { json: "type", js: "type", typ: "" },
        { json: "version", js: "version", typ: 0 },
        { json: "workspace", js: "workspace", typ: "" },
    ], "any"),
    "ResponseForEncryptSymmetricResponse": o([
        { json: "data", js: "data", typ: u(undefined, u(null, r("EncryptSymmetricResponse"))) },
        { json: "errorMessage", js: "errorMessage", typ: u(undefined, u(null, "")) },
        { json: "success", js: "success", typ: true },
    ], "any"),
    "EncryptSymmetricResponse": o([
        { json: "ciphertext", js: "ciphertext", typ: "" },
        { json: "iv", js: "iv", typ: "" },
        { json: "tag", js: "tag", typ: "" },
    ], "any"),
    "ResponseForGetSecretResponse": o([
        { json: "data", js: "data", typ: u(undefined, u(null, r("GetSecretResponse"))) },
        { json: "errorMessage", js: "errorMessage", typ: u(undefined, u(null, "")) },
        { json: "success", js: "success", typ: true },
    ], "any"),
    "GetSecretResponse": o([
        { json: "secret", js: "secret", typ: r("GetSecretResponseSecret") },
    ], "any"),
    "GetSecretResponseSecret": o([
        { json: "environment", js: "environment", typ: "" },
        { json: "isFallback", js: "isFallback", typ: u(undefined, true) },
        { json: "secretComment", js: "secretComment", typ: "" },
        { json: "secretKey", js: "secretKey", typ: "" },
        { json: "secretValue", js: "secretValue", typ: "" },
        { json: "type", js: "type", typ: "" },
        { json: "version", js: "version", typ: 0 },
        { json: "workspace", js: "workspace", typ: "" },
    ], "any"),
    "ResponseForListSecretsResponse": o([
        { json: "data", js: "data", typ: u(undefined, u(null, r("ListSecretsResponse"))) },
        { json: "errorMessage", js: "errorMessage", typ: u(undefined, u(null, "")) },
        { json: "success", js: "success", typ: true },
    ], "any"),
    "ListSecretsResponse": o([
        { json: "secrets", js: "secrets", typ: a(r("SecretElement")) },
    ], "any"),
    "SecretElement": o([
        { json: "environment", js: "environment", typ: "" },
        { json: "isFallback", js: "isFallback", typ: u(undefined, true) },
        { json: "secretComment", js: "secretComment", typ: "" },
        { json: "secretKey", js: "secretKey", typ: "" },
        { json: "secretValue", js: "secretValue", typ: "" },
        { json: "type", js: "type", typ: "" },
        { json: "version", js: "version", typ: 0 },
        { json: "workspace", js: "workspace", typ: "" },
    ], "any"),
    "ResponseForUpdateSecretResponse": o([
        { json: "data", js: "data", typ: u(undefined, u(null, r("UpdateSecretResponse"))) },
        { json: "errorMessage", js: "errorMessage", typ: u(undefined, u(null, "")) },
        { json: "success", js: "success", typ: true },
    ], "any"),
    "UpdateSecretResponse": o([
        { json: "secret", js: "secret", typ: r("UpdateSecretResponseSecret") },
    ], "any"),
    "UpdateSecretResponseSecret": o([
        { json: "environment", js: "environment", typ: "" },
        { json: "isFallback", js: "isFallback", typ: u(undefined, true) },
        { json: "secretComment", js: "secretComment", typ: "" },
        { json: "secretKey", js: "secretKey", typ: "" },
        { json: "secretValue", js: "secretValue", typ: "" },
        { json: "type", js: "type", typ: "" },
        { json: "version", js: "version", typ: 0 },
        { json: "workspace", js: "workspace", typ: "" },
    ], "any"),
};
