import { LogLevel } from "../../binding";
import { ClientSettings } from "./schemas";
import type { GetSecretOptions, GetSecretResponse } from "./schemas";
import type { ListSecretsOptions, ListSecretsResponse } from "./schemas";
import type { UpdateSecretOptions, UpdateSecretResponse } from "./schemas";
import type { CreateSecretOptions, CreateSecretResponse } from "./schemas";
import type { DeleteSecretOptions, DeleteSecretResponse } from "./schemas";
import type { DecryptSymmetricOptions } from "./schemas";
import type { EncryptSymmetricOptions, EncryptSymmetricResponse } from "./schemas";
export declare class InfisicalClient {
    #private;
    constructor(settings: ClientSettings & {
        logLevel?: LogLevel;
    });
    getSecret(options: GetSecretOptions): Promise<GetSecretResponse["secret"]>;
    listSecrets(options: ListSecretsOptions): Promise<ListSecretsResponse["secrets"]>;
    updateSecret(options: UpdateSecretOptions): Promise<UpdateSecretResponse["secret"]>;
    deleteSecret(options: DeleteSecretOptions): Promise<DeleteSecretResponse["secret"]>;
    createSecret(options: CreateSecretOptions): Promise<CreateSecretResponse["secret"]>;
    createSymmetricKey(): Promise<string>;
    encryptSymmetric(options: EncryptSymmetricOptions): Promise<EncryptSymmetricResponse>;
    decryptSymmetric(options: DecryptSymmetricOptions): Promise<string>;
}
export { LogLevel };
